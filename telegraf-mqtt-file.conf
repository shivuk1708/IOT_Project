# Telegraf Configuration
#
# Telegraf is entirely plugin driven. All metrics are gathered from the
# declared inputs, and sent to the declared outputs.

###############################################################################
#                            OUTPUT PLUGINS                                   #
###############################################################################

# # Configuration for sending metrics to InfluxDB 2.0
#[[outputs.influxdb_v2]]
#  alias = "influxdb-localhost"  
#  urls = ["http://127.0.0.1:8086"]
#  token = "SaSqNYN9ErpeMc_3JgP0VjTNGCQLkaNiUHlPJ6c4WstDHYgZvS0AwTLzGypTlXhXQJD7SVIzRb2Uz6lQGmUeoQ=="
#  organization = "GMU"
#  bucket = "iotdatalocal"


# # Configuration for sending telegraf metrics to file(s)
[[outputs.file]]
  alias = "telegraf-mqtt-file"
  files = ["/Users/shivakumarnyamagouda/Documents/Arduino/G01405418/Project/telegrafGxxxx5418.log"]
  data_format = "influx"


###############################################################################
#                            INPUT PLUGINS                                    #
###############################################################################

# # Configuration for reading metrics from MQTT topic(s)
[[inputs.mqtt_consumer]]
  alias = "mqtt.eclipse.org"
  servers = ["mqtt://public.cloud.shiftr.io:1883"]

  topics = [
    "gmu/ece508/team06/Gxxxx5418/Smart_Lawn_Irrigation_system",

  ]

  qos = 0
  connection_timeout = "30s"
  client_id = "Telegraf-Consumer-Localhost"
  username = "public"
  password = "public"

  data_format = "json_v2" # invokes the parser -- lines following are parser config
  [[inputs.mqtt_consumer.json_v2]]    
	#measurement_name_path = "measurement"
	#timestamp_path = "epoch"
	#timestamp_format = "unix"
	
	[[inputs.mqtt_consumer.json_v2.tag]]
        path = "class" # GJSON path: JSON is flat -- all keys at root
        type = "string"
    [[inputs.mqtt_consumer.json_v2.tag]]
        path = "team"
        type = "string"
    [[inputs.mqtt_consumer.json_v2.field]]
        path = "Gnumber"
        type = "string"
    [[inputs.mqtt_consumer.json_v2.field]]
        path = "device"
        type = "string"
    [[inputs.mqtt_consumer.json_v2.field]]
        path = "uptime"
        type = "string"
    [[inputs.mqtt_consumer.json_v2.field]]
        path = "rssi"
        type = "string"
    [[inputs.mqtt_consumer.json_v2.field]]
        path = "msgnum"
        type = "int"
    [[inputs.mqtt_consumer.json_v2.field]]
        path = "Temperature"
        type = "string"
    [[inputs.mqtt_consumer.json_v2.field]]
        path = "Soilmoisture"
        type = "string"
    [[inputs.mqtt_consumer.json_v2.field]]
        path = "Rain"
        type = "string"
    [[inputs.mqtt_consumer.json_v2.field]]
        path = "MotorStatus"
        type = "string"
    [[inputs.mqtt_consumer.json_v2.field]]
        path = "Date"
        type = "string"
#MQTT message JSON
#sensorObj["measurement"] = "ece508meas";
#sensorObj["device"] = "nano33iot";
#sensorObj["gnumber"] = String(gNumber);
#sensorObj["nmrMqttMessages"] = nmrMqttMessages;
#sensorObj["rssi"] = WiFi.RSSI();
#sensorObj["epoch"] = epochTimeNTP;